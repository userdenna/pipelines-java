## The schema for a pipeline:
##name: string  # build numbering format
##resources:
##  pipelines: [ pipelineResource ]
##  containers: [ containerResource ]
##  repositories: [ repositoryResource ]
##variables: # several syntaxes
##trigger: trigger
##pr: pr
##stages: [ stage | templateReference ]
## If you have a single-stage, you can omit the stages keyword and directly specify the jobs keyword:
## ... other pipeline-level keywords
# jobs: [ job | templateReference ]
## If you've a single-stage and a single job, you can omit the stages and jobs keywords and directly specify the steps keyword:
## ... other pipeline-level keywords
## steps: [ script | bash | pwsh | powershell | checkout | task | templateReference ]

#stages:
#- stage: Build
#  jobs:
#  - job: BuildJob
#    steps:
#    - script: echo Building!
#- stage: Test
#  dependsOn: Build
#  jobs:
#  - job: TestOnWindows
#    steps:

##Deployment strategies
#strategy:
#    runOnce:    # <.....
#        preDeploy:
#            pool: [ server | pool ] # See pool schema.
#            steps:
#            - script: [ script | bash | pwsh | powershell | checkout | task | templateReference ]
#        deploy:
#strategy:
#    rolling:    # <.....
#        maxParallel: [ number or percentage as x% ]
#strategy:
#    canary:    # <.....
#        increments: [ number ]

        
name: 1.0$(Rev:.r)

## simplified trigger (implied branch)
trigger:

- main

## equivalents trigger
# trigger:
#  branches:
#    include:
#    - main
#trigger:
#  branches:
#    exclude:
#    - main
#trigger:
#  branches:
#    include:
#    - feature/*
#  paths:
#    include:
#    - webapp/**
#trigger: none
    
variables:
  name: John

pool:
  vmImage: ubuntu-latest

## Resources let you reference:
## - other repositories
## - pipelines
## - builds (classic builds)
## - containers (for container jobs)
## - packages

resources:
  repositories:

  - repository: appcode
    type: git
    name: otherRepo

jobs:
##A job has the following attributes besides its name:
#displayName – a friendly name.
#dependsOn - a way to specify dependencies and ordering of multiple jobs.
#condition – a binary expression: if it evaluates to true, the job runs; if false, the job is skipped.
#strategy - used to control how jobs are parallelized.
#continueOnError - specify if the rest of the pipeline should continue if this job fails.
#pool – the pool name (queue) to run this job on.
#workspace - managing the source workspace.
#container - for specifying a container image to execute the job later.
#variables – variables scoped to this job.
#steps – the set of steps to execute.
#timeoutInMinutes and cancelTimeoutInMinutes for controlling timeouts.
#services - sidecar services that you can spin up.

- job: helloworld
  steps:
## Steps. A step is a linear sequence of operations that make up a job
    - checkout: self
#    - checkout: none
#    - download: none   # Jobs don't download anything unless you explicitly define a download, Deployment jobs implicitly do a download: current
    - script: echo "Hello, $(name)"

# Tasks - Tasks are the building blocks of a pipeline. There's a catalog of tasks available to choose from.
# steps:
# - task: VSBuild@1
#  displayName: Build
#  timeoutInMinutes: 120
#  inputs:
#    solution: '**\*.sln'
    
- job: B
  dependsOn: [] # This removes the implicit dependency on the previous stage and causes this to run in parallel.
  steps:
    - script: echo' job B.'
  
- job: C
  dependsOn: B
  steps:
    - script: echo' job C.'
